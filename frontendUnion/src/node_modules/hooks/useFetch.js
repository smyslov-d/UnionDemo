import { useState, useEffect , useCallback} from "react"
import axios from 'axios'

import useLocalStorage from 'hooks/useLocalStorage'

export default url => {
    const baseUrl = 'http://localhost:8080/api/v1'
    const [isLoading, setIsLoading] = useState(false)
    const [response, setResponse] = useState(null)
    const [error, setError] = useState(null)
    const [options, setOptions] = useState({})
    const [token] = useLocalStorage('token')


    const doFetch = useCallback((options = {}) => {
        setOptions(options)
        setIsLoading(true)
        console.log(`in useFetch метод doFetch-> получил options: setIsLoading в true`);
    }, [])

    useEffect(() => {
      console.log(`in useFetch метод useEffect->`);
        const requestOptions = {
          ...options,
          ...{
            headers: {
              Authorization: `${token}`
            }
          }
        }

        if(!isLoading) {
          return
        }
        axios(baseUrl + url, token ? requestOptions : options)
          .then(res => {
            console.log(`in useFetch метод useEffect->axios .THEN response data setIsLoading фолс`);
          setIsLoading(false)
          setResponse(res.data)
          })
          .catch(error => {
            console.log(`in useFetch метод useEffect->axios .CATCH response error setIsLoading фолс `);
            setIsLoading(false)
            setError(error.response.data)
          })
      }, [isLoading, options, url, token])

    return [{isLoading,response,error}, doFetch]
}